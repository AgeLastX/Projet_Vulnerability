import os
import subprocess
import getpass
import configparser
from crontab import CronTab

# Function to ask user for an IP address
def get_ip():
    ip = input("Enter an IP address: ")
    return ip
# Function to ask user for an URL address
def get_url():
    ip = input("Enter an URL address: ")
    return ip
# Function to fill the inventory.ini file
def fill_inventory(os_choice, ips):
    with open('inventory.ini', 'a') as file:
        file.write("[{}]\n".format(os_choice))
        for ip in ips:
            file.write("{}\n".format(ip))
        file.write("\n")
#Print MSI 4 -24 CS
def graph():
   os.system("clear") 
   print("""
   '##::::'##::'######::'####::::'##::::::::::::::::::'#######::'##::::::::::::'######:::'######::
    ###::'###:'##... ##:. ##::::: ##:::'##:::::::::::'##.... ##: ##:::'##:::::'##... ##:'##... ##:
    ####'####: ##:::..::: ##::::: ##::: ##:::::::::::..::::: ##: ##::: ##::::: ##:::..:: ##:::..::
    ## ### ##:. ######::: ##::::: ##::: ##::'#######::'#######:: ##::: ##::::: ##:::::::. ######::
    ##. #: ##::..... ##:: ##::::: #########:........:'##:::::::: #########:::: ##::::::::..... ##:
    ##:.:: ##:'##::: ##:: ##:::::...... ##::::::::::: ##::::::::...... ##::::: ##::: ##:'##::: ##:
    ##:::: ##:. ######::'####:::::::::: ##::::::::::: #########::::::: ##:::::. ######::. ######::
   ..:::::..:::......:::....:::::::::::..::::::::::::.........::::::::..:::::::......::::......:::
   """)

# Clear the contents of inventory.ini file
with open('inventory.ini', 'w') as file:
    file.write('')

# Function to write inventory to file
def write_inventory_to_file(inventory):
    with open("inventory.ini", "w") as file:
        for os, ips in inventory.items():
            file.write(f"[{os}]\n")
            for ip in ips:
                file.write(f"{ip}\n")
            if not ips:
                file.write("\n")


# Main menu

# Ask for confirmation to send email
graph()
while True:
   confirmation = input("Do you want to send the vulnerability test result by email? (Microsoft login information will be required) \nyes or no\n")

   if confirmation == "yes":
       email_username = input("Enter your Microsoft username: ")
       email_password = getpass.getpass("Enter your Microsoft password: ")
       email_dest = input("Enter Email Destination: ")
       break
   elif confirmation == "no":
       email_username = "x"
       email_password = "x"
       email_dest = "x"
       print(" ")
       break
   else:
       continue

graph()
# Ask for taskschedule
if confirmation == "yes":
   while True:
      taskschedule = input("Do you want to schedule a vulnerability scan task? (yes or no)\n")
      if taskschedule == "yes":
         # Save files for tasks
         config = configparser.ConfigParser()
         config.read('config.ini')

         if 'Variables' in config:
            config.remove_section('Variables')
         config.add_section('Variables')

         config.set('Variables', 'email_username', email_username)
         config.set('Variables', 'email_dest', email_dest)
         config.set('Variables', 'email_password', email_password)
         config.set('Variables', 'confirmation', confirmation)

         with open('config.ini', 'w') as config_file:
            config.write(config_file)

         username = getpass.getuser()
         cron = CronTab(user=username)

         for job in cron:
            if job.command == 'python tasks.py':
               break
         else:
            heure_execution = input("Please enter the execution time (24-hour format): ")
            command = 'python tasks.py'
            job = cron.new(command=command)
            job.setall(f'0 {heure_execution} * * *')
            cron.write()
         break

      elif taskschedule == "no":
         break
      else:
         continue

#menu os
inventory = {"Windows7": [], "Windows1011": [], "WindowsServer20082012": [], "Linux": [], "Urls":[]}
ips = []
graph()
while True:
    os_choice = input("Choose the target:\n1. Windows 7\n2. Windows 10-11\n3. Windows Server 2008-2012\n4. Linux\n5. Urls\n6. Quit\n")
    if os_choice == "6":
        if not any(inventory.values()):
            exit()
        else:
            break
    elif os_choice not in ["1", "2", "3", "4","5"]:
        print("Invalid choice")
        continue

    ips = []

    while True:
        if os_choice == "5":
            ip = get_url()
        else:
            ip = get_ip()

        if ip:
            if os_choice == "5":
                inventory["Urls"].append(ip)
            else:
                ips.append(ip)

        if os_choice == "5":
            more_ips = input("Do you want to add another URL? (yes/no)\n")
        else:
            more_ips = input("Do you want to add another IP address for this operating system? (yes/no)\n")

        if more_ips.lower() == "no":
            graph()
            break


    if os_choice == "1":
        inventory["Windows7"].extend(ips)
    elif os_choice == "2":
        inventory["Windows1011"].extend(ips)
    elif os_choice == "3":
        inventory["WindowsServer20082012"].extend(ips)
    elif os_choice == "4":
        inventory["Linux"].extend(ips)
    elif os_choice == "5":
        inventory["Urls"].extend(ips)

graph()
print("Vulnerability test in progress, please wait a few minutes")
print()
# Write inventory to file
write_inventory_to_file(inventory)
# lunch ansible with args
subprocess.run(['ansible-playbook', 'playbook.yaml', '-i', 'inventory.ini', '-e', f'email_username={email_username}', '-e', f'email_password={email_password}', '-e', f'email_dest={email_dest}', '-e', f'confirmation={confirmation}'])


